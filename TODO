  Things which are known about in this version which should be fixed (or just implemented!):  

  ORDER USB-SERIAL AND STUFF FOR IMPATIENT DEVELOPER SPECIAL

  For KickStarter Board:
        Fix SPI16 send at the same time as USB
        Make http and fs work with new module system
        Bootloader (use USB-CDC and standard stm32 flash protocol)
        Web IDE improvements
        Better I2C error reporting 'no device response' etc.
        Filesystem improvements (at least allow files to be read one line at a time)
        Ensure that pin state is saved to flash (also I2C/etc)
        Debounce in setWatch?
        Streaming filesystem methods

  For public release:
        Remove 'events' list - but still used by HTTP
        Ensure that filesystem uses SPI pins/device/etc from board info
        Rename tests to give them more useful names
        Remove pointer passing to JsParse
        Remove 'bit' functions

  HIGH PRIORITY:        
        Fix ArrayBuffer(1)
        a[5]===a["5"] and a[5]!=a["05"]  - but it doesn't in Espruino...
        Implement XON/XOFF flow control
        USB flow control for RX on the F4
        Touchscreen driver with onTouch callback
        timeout on spi rx when transmitting arrays (how?)
        SPI.send to return Typed Arrays (even if sent a normal array?)  
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
        Remove bit manipulation functions

  MEDIUM PRIORITY:
        setWatch(..A0);setWatch(..A0);clearWatch(0) kills second setWatch
        setWatch when usb disconnected (killing GPIO clocks breaks it)
        line wrap for toJSON        
        Reduce code size of HandleFunctionCall initial 8 bit switch, only check class via function call once name is matched - this INCREASES CODE SIZE
        Linux-based SPI and I2C control
        EventEmitter add removeListener
        Node.js-compatible functions to handle onXXX and registering onXXX handlers
        Reusable code for read/write/available for Serial/I2C : http://arduino.cc/en/Reference/Stream
        GDB-style debugger - Ctrl-C to break - and allow s/n/p/q type commands
        Handle parsing of 'e' numbers like 10.34e-5
        Device input callbacks to set 'this' to the device that was called
        LCD stringWidth method
        Set up http://wiki.ecmascript.org/doku.php?id=test262:command tests
        dump() should understand about __proto__ and PARENTINFO so objects can be recreated (special fn to find 'qualified' name)
        dump() could be aware of '#scope' - so it can restore inner functions properly
        Experiment with moving variables to the front of their object when they are accessed (speedup)
        Cache the last few IDs that were found (clear cache if variable added or scope changes)
        Implement a save() that can save state to a file on an SD card
        Add 'delete' keyword
        Add try..catch
        Check precedence against MDN javascript op precedence page
        Save pin input/output state along with save()
        When Ctrl-C, should print the line that the break first appeared on
        Add shiftOut function
        Lexer could store a name, so when line numbers are reported for errors, it can say where
        JSV_STRING (that is NOT also a NAME) could actually store 12 characters (not 8), and could even have a pointer to the last STRINGEXT to allow fast appends
        analogBuffer call to allow fast-ish ADC reads to be put into a buffer - perhaps the same for outputs too. It could even use existing timer IRQ code
        RTC (Real time clock) support on boards with it
        Support for special ArrayBuffer type that fits in continuous block of memory
        STM32F3 Alternate function for serial ports
        Looking up an index in an array could be made twice the speed for larger arrays (start at end - if <arr.length/2, start from beginning)        
        Creating fields inside a 'Pin', for instance 'Pin.prototype.foo = function (y) { this.x = y; }'. Also creating instances of Pin (what happens for the pin #??)
        toJSON should have a 'shortcut' mode (flags?) for the console where function innards aren't printed.
        Use the graphics bitmap1bit function for bitmap text
        Tweak graphicsFillVectorChar (or font data) to draw the char in exactly the right place and size
        Move error/warning messages to single file, so they can be localized (and potentially compressed)
        Use VT100 'clear line' if it exists - this might help with extra spaces when copy+pasting
 
  LOW PRIORITY
        We probably don't have to use a whole bit for JSV_NAME, as it's usually only str/int/float/arraybuffer
        Timer stuff might be supposed to use RCC_ClocksStatus.PCLK2_Frequency
        Turbo overclocking mode (VL running at 48Mhz seems ok according to IgorM)
        Instead of using execInfo.lex->tokenStart, loops store index + ref to stringext -> superfast!
        function.call(thisArg[, arg1[, arg2, ...]]) / function.apply(thisArg[, argsArray])
        handle 'new Function() { X.call(this); Y.call(this); }' correctly
        analogWrite should check about ports with overlapping timers
        Add string splice function (remove chars + add chars) and then speed up jsiHandleChar
        Implement call to Object.toString when string required
        If a line overflows and wraps, everything in interactive mode gets confused
        Arrays could store data in a n-tree, would be quite efficient (currently 8 data per 1 node)
        CAN support
        HY-STM32-2.8 - SD card not working
        HY-STM32-2.8 - Garbage on LCD when starting
        SDL should support multiple windows
        check_size script should now use information given for each board
        allow analog read of 1.2v voltage reference (ADC1_IN16)

  VERY LOW PRIORITY
        Ensure code is compatible with that created by Emscriptem
        Allow console to be put on a user-generated device (eg, LCD) - provide one fn for writing, and allow chars to be poked in
        On assert fail, should restart interpreter and try and recover (rare now!)
        String equals to compare whole 32 bit words (or 64 bit block)
        Could store vars in arrays/objects/functions as a binary tree instead of a linked list (or hashtable tree)
        Maybe keep track of whether JsVar was changed/written to? jsvLockWritable
        Memory manager to handle storing rarely used refs in SD card
           - use binary tree to look up JsVar from its ref
           - maybe also linked list to keep track of what is used most often
        Currently, accessing an undefined array or object item creates it. Maybe that could be changed?
        Can the max number of scopes ever be >2(3)? (Root)Function Caller,Function Called? What about 'this'?
        ToJSON for arrays could probably be faster now arrays are sorted
        http://doctrina.org/Javascript-Function-Invocation-Patterns.html - invoking a function from within method *should* make 'this' point to root 
               possibly, 'this' should be a keyword, not a variable that we define (would be faster)
        Use the 'True Random Number Generator' in some of the STM32s
        a++ doesn't behave like a=a+1 in functions (wrong scope). This should actually throw an error - but not for +=!!        
        WebSockets API
        Add USB Mass Storage support if an SD card is inserted

  PORTS
        Android port. Networking, serial comms, load/save ability, autostart
        Espruino for raspberry pi/carambola debian packages
        Port to Netduino Plus 2 (STM32F4, Ethernet, SD)
        Support this F4 board: http://www.ghielectronics.com/catalog/product/351


  Stretch goals
        £65k Raspberry Pi/OpenWRT port/Arduino YUN
        Console on 'software' port
        £75k NPM manager on web UI / NPM on Espruino itself - using espruino website 

At Home
=======
Phone parents
Put oil can in car
recover bluetooth module from dad

